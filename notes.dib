#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

## **TO-DO**

#!markdown

- [ ] add b64 icon to wadb ack notif
	- [x] ~~stream screen to device~~

#!markdown

- [ ] Ministeam: wait for app process before minimizing steam
  - [ ] add a new function to replace keep-steam-minzd. It will wait for app process before minimizing steam
  - [x] ~~get app exe name from shortcuts.vdf~~
  - [x] ~~switch back to single app launcher, good sideeffect:will make quotes unnecessary?~~

#!markdown

- [ ] add upgrades and adb serial param to miroor5

#!markdown

- [ ] find
 out runspace debug/verbose output, other than `&{ ... }*>&1`

#!markdown

- [ ] use `adb pull -a` and `adb push --sync`

#!markdown

- [ ] Look up Splatting in detail

#!markdown

- [ ]  Get-counter for performance and network traffic stats...
	- can detect download starts
	- maybe detect idles

#!markdown

- [ ] plotter?

#!markdown

- [ ] pingscan and save results
  - [x] ~~runs on every connection~~
  - saves result in cache
  - skips scan and retrieves cached result on subsequent calls
  - [x] ~~option to force rescan~~
  - needs to be able to detect new connections (to rescan if new connections found)
  - option to force retrieve cached list

#!markdown

- [ ] fix: wadb is slow is it? takes 8s and 5s on 1st n 2nd run  
  3s for adb start-server is expected but maybe the 5s can be improved

#!markdown

- [ ] use get-item

#!markdown

- [ ] fix: picsum not working

#!markdown

- [ ] vscode terminal auto replies (find out what it is)

#!markdown

- [ ] try wlanscan native call

#!markdown

decided to postpone fancy features for cfg-manager:
- [ ] cfgRef support+maintenance
- [ ] skip reasons
- [ ] saveback support (scripts can save new values for variables/hashtables)
- [ ] extended comments
- [ ] hashtables support
- [ ] 'used by files' list for variables in cfgref

#!markdown

## **DONE**

#!markdown

- [x] ~~use `adb shell cmd notification post -t`~~

#!markdown

- [ ] ~~get some mermaid classes for quick styling~~

#!markdown

- [x] ~~implement cfgManager, test it for:~~
  - [x] ~~strings~~
  - [x] ~~ints~~
  - [x] ~~lists~~
  - [x] ~~single string while calling~~

#!markdown

- [x] LaunchIf can't call other scripts, wtf? I made that steam launcher and now this means I need a secondary shortcut anyway. 

#!markdown

- [x] use set-content and add-content

#!markdown

- [x] fix: cfgMan call pattern is case sensitive

#!markdown

- [x] just for fun, script a battery percentage logger

#!markdown

- [x] rewrite opkftp in powershell

```powershell
arp -a|sls '.*?(((25[0-5]|(2[0-4]|1?\d)?\d)\.?\b){4}).*?dynamic.*?'-AllMatches|%{$_.matches|%{explorer "ftp://${user}:$pass@"+$_.groups[1].value+":$port"}}

0..999|%{$c=3;$ips=''}{
$ips+=$_
$ips+=if($c--){'.'}else{$c=3;' '}
}{$inTxt=$ips}
```

#!markdown

- [x] try notebook mode, from polyglot extension

#!markdown

- [x] need a standard for cfgman calls, for the varlist specifically
  - parser will capture everything from top of script to the first cfgman call,  
    replace cfgman with output varname for the var list and use iex to get the list of variable names.
  - Thus, cfgman calls will need to:
    - be placed as close to the top as possible, before any sort of operations  
      like changing working dirs or running init methods
    - cfgman call must be contained in a single line, so if the list needs multiple lines, define the list in a var above the call and then use the var in the cfgman call.
  - the captured param block will throw an error so dump the iex's error stream (and output stream as well?)  
    like so `iex $captured 2>&1>$null`

#!markdown

- [x] extract secrets from scripts
  - [x] adb port num
  - [x] warmup paths x5
  - [x] launchif wifi_ids
  - [x] coffee wifi_ids
  - [x] ftp username,pass,port
  - [x] icon map,icofol,dirlist
  - [x] picsum paths x1
  - [x] jdk choose, projlist
  - [x] setgxx paths x2
  - [x] steam path
  - [x] asusgest path

#!markdown

- [x] remove secrets from scripts
  - [x] adb port num
  - [x] warmup paths x5
  - [x] launchif wifi_ids
  - [x] coffee wifi_ids
  - [x] ftp username,pass,port
  - [x] icon map,icofol,dirlist
  - [x] picsum paths x1
  - [x] jdk choose, projlist
  - [x] setgxx paths x2
  - [x] steam path
  - [x] asusgest path

#!markdown

- [x] gitignore exes

#!markdown

- [x] add cfgMan calls

#!markdown

- [x] push first commit to github

#!markdown

- [x] host executable deps?  
       found sources but, one is in alpha and  
       the other's binary is base64 encoded on a superuser post  
       with src in text attached.. that's probably comfortable but  
       needs a c++ compiler  
       **decision**: try-catch exe usages, log error msgs pointing to  
       (1) build instructions AND  
       (2) prebuilt/encoded (easy access) binaries

#!markdown

- [x] try notebook mode, from polyglot extension

#!markdown

## **Notes**

#!markdown

- plan  
  cfg, template, script(collector+middleman/cfgMan)  
  gitignore cfg  
  template collects descs from?/to? cfg and vars from scripts  
  need to support lists and namespaces(?)

#!markdown

- [x] solidify var fetch mech
  - script calls cfgMan with list of vars
  - cfgMan in middleman mode checks _cfgBox_ for a file by caller's name(myinvokn.pscommandpath)
    - _found_: call it/ init those vars **init vars()**
    - _not found_: check cfgRef & cfgRoll for var names
      - _Not_ found: add var names to cfgRef n cfgRoll and  
        return fail msg _stating the recent addition_, request _vars be defined_
      - _Found_: check for null values
        - _any_ are _undef_: return fail msg requesting the _vars be defined_ in cfgRoll
        - _all_ are _Defined_: create cfg file for the script in cfgBox, init vars()
  - cfgMan in collecting mode will have to parse all scripts and identify calls to self
    and get the list of vars from each file, no dupes, append cfgRoll with the any new vars found.
  - get the hashtable from cfgRoll before collecting

#!markdown

- [x] support interpolated variables  
      iex saves the day  
      interpolation is inevitable  
      triple escape dollar sign,  
      don't escape double quotes  
      dblquotes must be paired

#!markdown

- [x] distinguish betn vars, lists and more
```powershell
@() -is [Array]
```

#!markdown

- [x] figure out git repo structure  
      folder contains separate scripts to define vars for each registered script file  
      outside the folder, one value file containing all variables and values  
      with descriptions alongside meant to be edited by the user, gitignored  
      and one markdown file detailing descriptions of each variable,  
      this is the first copy of descriptions and vars
