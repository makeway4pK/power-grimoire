#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

The Problem: Wadb is slow, unreliable and has now-broken features.
- Slow: takes 8s to 5s to connect
- unreliable: sometimes the warmup script gets no output, but upon later inspection, the connection had succeded.
- now-broken features: Since the last time I edited this script, smartphones have got
	mac-randomization feature to avoid tracking across diff wifi networks. It's a privacy n security feature
	so, it'll be pervasive soon, no point trying to work around it, tracking devices via mac is better forgotten.

#!markdown

First of all, about the broken feature of remembering devices
 - It is useful only if devices can be identified between sessions
 - that will require saving a token(as a file most probably) onto the device
 - saving a token on the device is a bit invasive
 - not a useful id for security sensitive usecase
 - potential uses of this feature:
	- recognising warmup device
		can be done by saving the token in the file itself,
		no need for a token specific to wadb script
 	- avoiding stray connection requests
		saving a file requires an adb connection in the first place
		and beacuse no network info is trackable spamming adb connections is [inevitable]().

- no proper usecase and problems with clean implementation makes me think I'd rather [let this feature go]()
	which means wadb will run only in quiet mode.
> Irrelevant note: iOS devices have a **'bonjour'** thing that lets you know you're talking to an iOS device on the network, apparently requiring minimal authorization

#!markdown

For the script being slow, 
- I'm looking into [runspaces]() for parallel connection waits
- use notif ack instead of sending inputs, it's faster, less disruptive and provides audio feedback

#!markdown

- make a wrapper for using runspace pools sometime later. stub for later:  
```
class RunspacePromise{
	hidden [powershell]$shell
	hidden [System.IAsyncResult]$handle
	[bool]$IsCompleted
	RunspacePromise([System.Management.Automation.Runspaces.RunspacePool]$rsp){
		
	}
}
```

#!markdown

For unreliability, gotta debug it after using runspaces to make sure it isn't just because of the sluggishness with Jobs.

#!markdown

# Todo

#!markdown

- [x] find out how to get output from runspaces before completion  
		it waits for the instance to complete, blocking the current thread

#!markdown

- [x] any advantage of using runspace pools?  
		Yes, minimal, but noticeable over 200 instances  
Output of the below code:  
```
Runspace-pool time: 2845.8395
Runspace-only time: 3371.9058
Ran both for 256 instances
``````

#!pwsh

$range=1..256;

'Runspace-pool time: '+(measure-command{
	$rsp=[runspacefactory]::Createrunspacepool(2,$range.count);
	$rsp.open();
	$d=@{};
	$out=$range|%{$ps=[powershell]::create().addscript({
		param($inp)
		sleep 1
		"hi i'm $inp"
		}).addparameter('inp',$_);
	$ps.RunspacePool=$rsp
	,@($ps,
		$ps.begininvoke(($d[$_]=[System.Management.Automation.PSDataCollection[PSCustomObject]]::new()),$d[$_])
	)};
	$out|%{$_[0].endinvoke($_[1])}
	$rsp.dispose();}).TotalMilliseconds
	
'Runspace-only time: '+(measure-command{
	$d=@{};
	$out=$range|%{$ps=[powershell]::create().addscript({
		param($inp)
		sleep 1
		"hi i'm $inp"
		}).addparameter('inp',$_);
	,@($ps,
		$ps.begininvoke(($d[$_]=[System.Management.Automation.PSDataCollection[PSCustomObject]]::new()),$d[$_])
	)};$out|%{$_[0].endinvoke($_[1])}}).TotalMilliseconds
	'Ran both for '+$range.count+' instances'

#!markdown

# Plan

#!markdown

## notes

#!markdown

- wanted to use ipv6 addresses but don't have time to understand and figure out how to get a network's subnet mask in ipv6, it's not as simple as ipv4 masks :rolleyes:

#!markdown

- Get-NetNeighbour is better than arp for filtering idiomatic entries  
```powershell
Get-NetNeighbor -InterfaceIndex 8 -AddressFamily IPv4|? {@('Permanent','Unreachable') -cnotcontains $_.State}
```

#!markdown

- but get interface index and subnet mask from arp, because it is better at ignoring inactive interfaces (ethernet, bluetooth, etc):
```
Interface: 192.168.43.85 --- 0x8
  Internet Address      Physical Address      Type
  192.168.43.226        26-05-a4-0b-b1-65     dynamic
  192.168.43.255        ff-ff-ff-ff-ff-ff     static
  224.0.0.22            01-00-5e-00-00-16     static
  224.0.0.251           01-00-5e-00-00-fb     static
  224.0.0.252           01-00-5e-00-00-fc     static
  239.255.255.250       01-00-5e-7f-ff-fa     static
  255.255.255.255       ff-ff-ff-ff-ff-ff     static

```

#!markdown

## Flows

#!markdown

### discovery

#!markdown

```mermaid
graph TD
arp[[all addresses from arp]]
pingscan[[ping all to find more local devices]]
adb[[spam adb connection]]
out[(output serials)]

arp --> adb
pingscan ----> adb
adb -->out

```

#!markdown

### connection sequence

#!markdown

```mermaid
stateDiagram-v2
discovery: Discovery
preferPort: Try connection using Preferred portnum, foreach
defaultPort: Try connection using Default portnum, foreach
switchPort: adb tcpip preferredPort, foreach
preferPort2: Try connection using Preferred portnum, foreach
ack: Send Ack notif
output: Output serials

[*] --> discovery
discovery --> preferPort:Reachable IPs
preferPort --> output: Already connected
preferPort --> ack: Connected now
preferPort --> defaultPort: failed IPs
defaultPort --> [*]: failed IPs
defaultPort --> switchPort: Connected IPs
switchPort --> preferPort2: switched to prefered portnum
preferPort2 --> ack: Connected
preferPort2 --> [*]: failed IPs
ack --> output
```
