#!meta

{"kernelInfo":{"defaultKernelName":"pwsh","items":[{"aliases":[],"languageName":"pwsh","name":"pwsh"}]}}

#!markdown

Q: set-variable scopes options? parent scope possible?

#!pwsh

sv -Visibility Public abc cdf
$varItem = (gv abc)

#!pwsh

$varItem.Attributes+'ascasc'

#!pwsh

$varItem.Options

#!pwsh

function setv([string] $str){
	sv -Visibility Public FnVar $str
}

#!pwsh

setv 'String1'
gv FnVar

#!markdown

- okay, sv-vis public doesn't let vars out of functions, as expected... but that can be a problem

#!markdown

dot scoping the setter function from another script file seems an easy but clunky solution, last option

#!pwsh

function setv([string] $str){
	sv -Visibility Script FnVar $str
}

#!pwsh

setv 'String2'

#!markdown

set-var is limited in its scope options but I see a way by handling vars using the obj returned by get-var

#!pwsh

$gvOut=gv
$gvOut.GetType()
$gvOut.Contains('$')

#!markdown

- it's an Array of variable objects

#!pwsh

$gvOut=gv -Scope Script
$gvOut.count
$gvOut=gv -Scope Local
$gvOut.count
$gvOut=gv -Scope Global
$gvOut.count
help gv

#!markdown

I think this notebook isn't useful for code research rn

#!markdown

- PSVariable objs store referenced values, i.e. shallow copies of variables that they represent(or point to)

#!markdown

- `sv -scope Script` allows to set vars from inside a function

#!pwsh

rv Tvar*
rv `@*
1..9|foreach{sv "Tvar$_" "TestValue: $_"}
# gv Tvar*
$liTvar=(gv Tvar*)|select -Property Name,Value
# rv $Tvars
rv Tvar*
rv `@*

$liTvar|sv
$Tvar5

#!pwsh

rv Tvar*
rv `@*
1..9|foreach{$liTvar=@{}}{
	$var=(sv "Tvar$_" "TestValue: $_" -PassThru)
	$liTvar[$var]=$var.Value
	}
# gv Tvar*
rv Tvar*
rv `@*

$liTvar|sv
# sv $liTvar
$Tvar5
# $Tvar5.GetType()

#!markdown

Current options for varaible setter:

- Dot scoping -------------------------------- [<going with this\>]()
  - `sv -scope script` allows setting variables from a function to the script scope
  - which will be the caller script's scope since cfgMan will called by dot-scoping
- pass values to caller
  - needs loop in caller code (pls no)
  - because set-variable can't handle collections/pipelined values

#!markdown

Parsing notes:

- `Select-string` is faster than `Get-content` for bigger files
  [Stack-Overflow: get-content high memory usage ](https://stackoverflow.com/questions/38870089/ps-get-content-high-memory-usage-is-there-a-more-efficient-way-to-filter-a-file)
- ~~I might be able to parse varlists faster if added to the annotations that show up when using  
  ` help <cmdlet/script>`~~

#!markdown

Tested all three on a ~2MB text file out of which ~500KB were notes, fresh terminal (I hope nothing was cached(??))
![Alt text](Screenshot%202023-05-17%20182833.png)

- [Select-string (sls)]() is fastest among the three, no need for annotations

#!pwsh

"Get-Help      took "+(Measure-command {get-help .\helptest.ps1 -full}).milliseconds+"ms for notes"
"Get-Content   took "+(measure-command {(gc .\helptest.ps1) -match 'note'}).milliseconds+"ms for notes"
"Select-String took "+(measure-command {sls -path .\helptest.ps1 'code'}).milliseconds+"ms  for code"
"Select-String took "+(measure-command {sls -path .\helptest.ps1 'note'}).milliseconds+"ms  for notes"
